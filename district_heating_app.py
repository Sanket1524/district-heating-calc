{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0c9688f5-af42-4f59-804f-46a26034edff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "\n",
    "st.set_page_config(page_title=\"District Heating Calculator\", layout=\"centered\")\n",
    "\n",
    "st.title(\"üè† District Heating Energy Calculator\")\n",
    "st.markdown(\"Use the panel below to enter parameters and estimate daily heating requirements and fuel breakdown.\")\n",
    "\n",
    "# --- Inputs ---\n",
    "st.header(\"1. Input Parameters\")\n",
    "col1, col2 = st.columns(2)\n",
    "\n",
    "with col1:\n",
    "    area = st.number_input(\"Area of Complex (m¬≤)\", value=22102)\n",
    "    indoor_temp = st.number_input(\"Indoor Temperature (¬∞C)\", value=20)\n",
    "    outdoor_temp = st.number_input(\"Outdoor Temperature (¬∞C)\", value=5)\n",
    "    u_value = st.number_input(\"U-Value (W/m¬≤K)\", value=0.15)\n",
    "    system_loss = st.slider(\"System Loss (%)\", min_value=0, max_value=100, value=50) / 100\n",
    "    boiler_eff = st.slider(\"Boiler Efficiency (%)\", min_value=50, max_value=100, value=85) / 100\n",
    "    elec_price = st.number_input(\"Electricity Price (‚Ç¨/kWh)\", value=0.25)\n",
    "    gas_emission = st.number_input(\"CO‚ÇÇ Emission Factor (kg/kWh)\", value=0.233)\n",
    "\n",
    "with col2:\n",
    "    chp_enabled = st.selectbox(\"Is CHP Installed?\", [\"Yes\", \"No\"])\n",
    "    chp_th = st.number_input(\"CHP Thermal Output (kW)\", value=44.7)\n",
    "    chp_el = st.number_input(\"CHP Electrical Output (kW)\", value=19.965)\n",
    "    chp_gas = st.number_input(\"CHP Gas Input (kW)\", value=67.9)\n",
    "    chp_hours = st.slider(\"CHP Hours/Day\", 0, 24, value=15)\n",
    "    chp_adj = st.slider(\"CHP Adjustment Factor (%)\", 0, 100, value=95) / 100\n",
    "\n",
    "st.subheader(\"Heat Pump\")\n",
    "hp_enabled = st.selectbox(\"Is Heat Pump Installed?\", [\"Yes\", \"No\"])\n",
    "hp_th = st.number_input(\"Heat Pump Thermal Output (kW)\", value=60)\n",
    "hp_hours = st.slider(\"HP Hours/Day\", 0, 24, value=9)\n",
    "hp_cop = st.number_input(\"HP COP\", value=4.0)\n",
    "\n",
    "# --- Daily Calculations ---\n",
    "heat_demand = (u_value * area * (indoor_temp - outdoor_temp) * 24) / 1000 * (1 + system_loss)\n",
    "chp_thermal = chp_th * chp_adj * chp_hours if chp_enabled == \"Yes\" else 0\n",
    "chp_electric = chp_el * chp_adj * chp_hours if chp_enabled == \"Yes\" else 0\n",
    "chp_gas_input = chp_gas * chp_adj * chp_hours if chp_enabled == \"Yes\" else 0\n",
    "\n",
    "hp_thermal = hp_th * hp_hours if hp_enabled == \"Yes\" else 0\n",
    "hp_electric = hp_thermal / hp_cop if hp_enabled == \"Yes\" and hp_cop else 0\n",
    "\n",
    "boiler_thermal = max(0, heat_demand - chp_thermal - hp_thermal)\n",
    "boiler_gas_input = boiler_thermal / boiler_eff if boiler_thermal > 0 else 0\n",
    "\n",
    "# --- Output ---\n",
    "st.header(\"2. Output Summary\")\n",
    "st.metric(\"Total Heat Demand (kWh/day)\", f\"{heat_demand:.2f}\")\n",
    "\n",
    "col1, col2, col3 = st.columns(3)\n",
    "col1.metric(\"CHP Heat Output\", f\"{chp_thermal:.2f} kWh\")\n",
    "col2.metric(\"HP Heat Output\", f\"{hp_thermal:.2f} kWh\")\n",
    "col3.metric(\"Boiler Heat Output\", f\"{boiler_thermal:.2f} kWh\")\n",
    "\n",
    "col1.metric(\"CHP Gas Input\", f\"{chp_gas_input:.2f} kWh\")\n",
    "col2.metric(\"HP Elec Used\", f\"{hp_electric:.2f} kWh\")\n",
    "col3.metric(\"Boiler Gas Input\", f\"{boiler_gas_input:.2f} kWh\")\n",
    "\n",
    "# --- Chart ---\n",
    "st.header(\"3. Heat Source Breakdown\")\n",
    "df = pd.DataFrame({\n",
    "    'Source': ['CHP', 'Heat Pump', 'Boiler'],\n",
    "    'Energy (kWh)': [chp_thermal, hp_thermal, boiler_thermal]\n",
    "})\n",
    "st.bar_chart(df.set_index(\"Source\"))\n",
    "\n",
    "# --- Forecasting ---\n",
    "st.header(\"4. Forecasting: Monthly & Annual Estimates\")\n",
    "monthly_temps = {\n",
    "    \"Jan\": 5.0, \"Feb\": 5.5, \"Mar\": 7.0, \"Apr\": 9.0, \"May\": 11.0, \"Jun\": 13.5,\n",
    "    \"Jul\": 15.0, \"Aug\": 15.0, \"Sep\": 13.0, \"Oct\": 10.0, \"Nov\": 7.0, \"Dec\": 5.5\n",
    "}\n",
    "days_in_month = {\n",
    "    \"Jan\": 31, \"Feb\": 28, \"Mar\": 31, \"Apr\": 30, \"May\": 31, \"Jun\": 30,\n",
    "    \"Jul\": 31, \"Aug\": 31, \"Sep\": 30, \"Oct\": 31, \"Nov\": 30, \"Dec\": 31\n",
    "}\n",
    "\n",
    "forecast = []\n",
    "for month in monthly_temps:\n",
    "    temp = monthly_temps[month]\n",
    "    days = days_in_month[month]\n",
    "    heat = (u_value * area * (indoor_temp - temp) * 24) / 1000 * (1 + system_loss)\n",
    "    heat_month = heat * days\n",
    "    chp_th_m = chp_th * chp_adj * chp_hours * days if chp_enabled == \"Yes\" else 0\n",
    "    chp_gas_m = chp_gas * chp_adj * chp_hours * days if chp_enabled == \"Yes\" else 0\n",
    "    hp_th_m = hp_th * hp_hours * days if hp_enabled == \"Yes\" else 0\n",
    "    hp_el_m = hp_th_m / hp_cop if hp_enabled == \"Yes\" and hp_cop else 0\n",
    "    boiler_th = max(0, heat_month - chp_th_m - hp_th_m)\n",
    "    boiler_gas_m = boiler_th / boiler_eff if boiler_th > 0 else 0\n",
    "    total_gas = boiler_gas_m + chp_gas_m\n",
    "    co2 = total_gas * gas_emission\n",
    "    elec_cost = hp_el_m * elec_price\n",
    "\n",
    "    forecast.append({\n",
    "        \"Month\": month,\n",
    "        \"Heating (kWh)\": heat_month,\n",
    "        \"CHP Gas (kWh)\": chp_gas_m,\n",
    "        \"Boiler Gas (kWh)\": boiler_gas_m,\n",
    "        \"HP Electricity (kWh)\": hp_el_m,\n",
    "        \"Electricity Cost (‚Ç¨)\": elec_cost,\n",
    "        \"CO‚ÇÇ Emissions (kg)\": co2\n",
    "    })\n",
    "\n",
    "forecast_df = pd.DataFrame(forecast).set_index(\"Month\")\n",
    "\n",
    "st.subheader(\"üìÖ Monthly Forecast Table\")\n",
    "st.dataframe(forecast_df.style.format(\"{:.0f}\"))\n",
    "\n",
    "if st.toggle(\"Show Forecast Charts\"):\n",
    "    st.bar_chart(forecast_df[[\"Heating (kWh)\", \"CO‚ÇÇ Emissions (kg)\"]])\n",
    "    st.line_chart(forecast_df[[\"Electricity Cost (‚Ç¨)\", \"HP Electricity (kWh)\"]])\n",
    "\n",
    "if st.download_button(\"üì• Download Forecast CSV\", data=forecast_df.to_csv(), file_name=\"district_heating_forecast.csv\"):\n",
    "    st.success(\"CSV download initiated!\")\n",
    "\n",
    "st.success(f\"üèÅ Annual Heating: {forecast_df['Heating (kWh)'].sum():,.0f} kWh | Annual CO‚ÇÇ: {forecast_df['CO‚ÇÇ Emissions (kg)'].sum():,.0f} kg | Annual Electricity Cost: ‚Ç¨{forecast_df['Electricity Cost (‚Ç¨)'].sum():,.0f}\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf1e3c49-b1f7-4756-80f0-d5aab47f79a5",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
